// ◮◮◮ GENERATED BY AURORA ◮◮◮
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model BankAccount {
  id           String   @id @default(uuid())
  bank_code    Int
  bank_name    String
  account_name String
  agency       String
  account      String
  check_digit  String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String

  @@map("bank_accounts")
}

model User {
  id                   String             @id @default(uuid())
  refreshTokens        UserRefreshToken[]
  name                 String
  email                String
  ddd                  String
  phone                String
  birthDate            DateTime
  nationality          String
  monthly_income       Float
  occupation           String
  pep                  Boolean?
  password             String
  confirmed            Boolean?           @default(false)
  restorePasswordToken String?            @default("")
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  bank_accounts        Document[]
  contacts             Contact[]

  @@map("users")
  BankAccount BankAccount[]
}

model Contact {
  id           String    @id @default(uuid())
  bank_code    Int
  bank_name    String
  country      Countries
  contact_name String
  agency       String
  account      String
  document     String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id])
  user_id      String

  @@map("contacts")
}

model Document {
  id                String   @id @default(uuid())
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  type              DocType
  issuing_authority String
  number            String
  expiration_date   DateTime
  user              User     @relation(fields: [user_id], references: [id])
  user_id           String
  // pictures
  front             String
  back              String?

  @@map("documents")
}

model UserRefreshToken {
  id             String   @id @default(uuid())
  refreshToken   String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  used           Boolean  @default(false)
  expirationDate DateTime
  createdAt      DateTime @default(now())

  @@unique([userId, refreshToken])
  @@map("user_refresh_tokens")
}

enum Countries {
  BR
  UK
  US
  IT
  CH
}

enum DocType {
  CPF
  RG
  PASSPORT
}